#!/bin/bash

GIT_DIRTY_FILES=$(git status --porcelain | wc -l)
if [[ $GIT_DIRTY_FILES -gt 0 ]]; then
  echo "Git repo is dirty. Please commit or stash changes before updating."
  exit 1
fi

sudo echo 'Cache sudo credentials'

OS=$(cat /etc/os-release | grep ^ID= | cut -d '=' -f 2)
echo "Running on $OS"

git submodule update --init

update () {
  rm -rf "$HOME/.$1"
  ln -s "$PWD/$1" "$HOME/.$1"
}

mk-dir-if-not-found () {
  [[ ! -d "$1" ]] &&
    mkdir -p "$1"
}

update zshrc
update inputrc
update gvimrc
update vimrc
update tmux.conf
update gitignore
update gitconfig
update R
update Rprofile
update dircolors

rm -rf $HOME/scripts
ln -s $PWD/scripts $HOME/scripts

mk-dir-if-not-found $HOME/.ssh
sudo chown -R $USER:$USER $HOME/.ssh
[[ -f $HOME/.ssh/config ]] && mv $HOME/.ssh/config{,.bkup}
unlink $HOME/.ssh/config 2> /dev/null
ln -s $PWD/ssh-config $HOME/.ssh/config
chmod 700 $HOME/.ssh
chmod 400 $HOME/.ssh/*
[[ -f $HOME/.ssh/known_hosts ]] && chmod 600 $HOME/.ssh/known_hosts

mk-dir-if-not-found $HOME/.cache/zsh

mk-dir-if-not-found $HOME/.rstat/lib

mk-dir-if-not-found $HOME/.ipython/profile_default
[[ -f $HOME/.ipython/profile_default/ipython_config.py ]] &&
  mv $HOME/.ipython/profile_default/ipython_config.py{,.bkup}
unlink $HOME/.ipython/profile_default/ipython_config.py 2> /dev/null
ln -s $PWD/ipython_config.py $HOME/.ipython/profile_default/ipython_config.py

# Assuming the submodule is populated
fzf/uninstall
fzf/install
rm $HOME/.fzf.{ba,z}sh
git checkout .

if [[ "$1" == "--vundle" || "$2" == "--vundle" ]]; then
  rm -rf $HOME/.vim
  mkdir -p $HOME/.vim/bundle
  git clone 'https://github.com/VundleVim/Vundle.vim' \
      $HOME/.vim/bundle/Vundle.vim
  vim -u NONE +PluginInstall +qall
fi

rm -rf $HOME/.tmux/plugins/tpm
git clone 'https://github.com/tmux-plugins/tpm' $HOME/.tmux/plugins/tpm

if [[ "$OS" == "ubuntu" ]]; then
  rm -rf $HOME/.zprompt/pure
  git clone 'https://github.com/sindresorhus/pure.git' $HOME/.zprompt/pure
fi

if [[ "$OS" == "arch" ]]; then
  if [[ -z "$(command -v paru)" ]]; then
    parus -S zsh-pure-prompt-git
  else
    echo "paru not found. Install paru first and then zsh-pure-prompt-git"
  fi
fi

if [[ "$1" == "--wsl" || "$2" == "--wsl" ]]; then

  sudo cp wsl.conf /etc/wsl.conf

  if [[ "$OS" == "ubuntu" ]]; then
    sudo apt-get update && sudo apt-get upgrade
    sudo apt-get install -y \
      bat \
      cowsay \
      dos2unix \
      fd-find \
      fonts-cascadia-code \
      fonts-firacode \
      fortune-mod \
      plocate \
      mplayer \
      mupdf \
      python3-pip \
      python3-tk \
      r-base \
      ripgrep \
      tree \
      unzip \
      vim-gtk3 \
      virtualenv \
      x11-apps \
      zsh

    sudo ln -s /usr/bin/fdfind /usr/bin/fd
    sudo ln -s /usr/bin/batcat /usr/bin/bat
    sudo ln -s /usr/bin/python3 /usr/bin/python

  fi

  if [[ "$OS" == "arch" ]]; then
    sudo pacman -Syyu
    sudo pacman -S --needed \
      bat \
      cowsay \
      dos2unix \
      fd \
      fortune-mod \
      plocate \
      mplayer \
      mupdf \
      python \
      python-pip \
      r \
      ripgrep \
      tree \
      ttf-cascadia-code \
      ttf-fira-code \
      unzip \
      vim \
      python-virtualenv \
      xorg-xclock \
      zsh
  fi

  chsh

  MNT=/mnt
  get_win_var () {
    wslpath -u $(cmd.exe /c echo $1 2> /dev/null) | tr -d ''
  }

  [[ -d "$HOME/c" ]] || ln -s $MNT/c $HOME/c
  [[ -d "$HOME/d" ]] || ln -s $MNT/d $HOME/d
  [[ -d "$HOME/winhome" ]] || ln -s $MNT/c/Users/$(get_win_var %USERNAME%) $HOME/winhome
  [[ -d "$HOME/doc" ]] || ln -s $HOME/winhome/Documents $HOME/doc
  [[ -d "$HOME/tmp" ]] || ln -s $HOME/winhome/Downloads $HOME/tmp
  [[ -d "$HOME/temp" ]] || ln -s $(get_win_var %TMP%) $HOME/temp

  if [[ -d $HOME/winhome/.ssh ]]; then
    mk-dir-if-not-found $HOME/.ssh
    [[ -f $HOME/.ssh/known_hosts ]] && cp $HOME/.ssh/known_hosts{,.bkup}
    sudo cp $HOME/winhome/.ssh/* $HOME/.ssh/
    sudo chown -R $USER:$USER $HOME/.ssh
    chmod 700 $HOME/.ssh
    chmod 400 $HOME/.ssh/*
    if [[ -f $HOME/.ssh/known_hosts.bkup ]]; then
      cat $HOME/.ssh/known_hosts.bkup >> $HOME/.ssh/known_hosts
      rm $HOME/.ssh/known_hosts.bkup
    fi
    [[ -f $HOME/.ssh/known_hosts ]] && chmod 600 $HOME/.ssh/known_hosts
  fi

  PS_DIR=$HOME/winhome/Documents/WindowsPowerShell/
  PS_PROF=Microsoft.PowerShell_profile.ps1
  mk-dir-if-not-found $PS_DIR
  if [[ -f $PS_DIR/$PS_PROF ]]; then
    cat $PS_PROF >> $PS_DIR/$PS_PROF
  else
    cp $PS_PROF $PS_DIR/
  fi

  [[ -f $HOME/.zshrc.wsl ]] && rm $HOME/.zshrc.wsl
  ln -s zshrc.wsl >> $HOME/.zshrc.wsl
  [[ -f $HOME/.zshrc.docker ]] && rm $HOME/.zshrc.docker
  ln -s zshrc.docker >> $HOME/.zshrc.docker
  touch .zshrc.more

  source zshrc.wsl; cp $PWD/windows-terminal-settings.json $WIN_TERM_SETTINGS

fi

exit 0
