#!/usr/bin/env python3

import sys
import os
import argparse
import openai

from colorama import Fore, Style
from colorama import init as colorama_init
from openai import AzureOpenAI


def main():
    colorama_init(autoreset=True)

    # Parse command line arguments
    parser = argparse.ArgumentParser(
        description='Interactive REPL session with OpenAI GPT-3.5 or GPT-4.'
    )

    parser.add_argument(
        '-m',
        '--model',
        choices=['3', '4'],
        default='3',
        help='Select the model version: 3 for GPT-3.5, 4 for GPT-4'
    )

    parser.add_argument(
        '-t',
        '--temperature',
        type=float,
        default=0.7,
        help='Sampling temperature (default: 0.7)'
    )

    parser.add_argument(
        '-o',
        '--max-tokens',
        type=int,
        default=512,
        help='Maximum number of tokens to generate (default: 512)'
    )
    args = parser.parse_args()

    # Model and API setup based on arguments
    deployment_id = {
        '3': 'avalok-turbo-16k-test',
        '4': 'avalok-turbo-gpt4turbo'
    }[args.model]

    api_key = {
        "3": os.getenv("GPT3_TEST_API_KEY"),
        "4": os.getenv("GPT4_API_KEY")
    }[args.model]

    api_base = {
        "3": os.getenv("GPT3_TEST_API_BASE"),
        "4": os.getenv("GPT4_API_BASE")
    }[args.model]

    client = AzureOpenAI(
        api_version="2023-05-15",
        api_key=api_key,
        azure_endpoint=api_base,
    )

    # Conversation state
    messages = []

    msg = "NB: Type ,,, to finish your input and let the AI start."
    print(f"{Fore.RED}{msg}{Style.RESET_ALL}")

    try:
        while True:
            # Prompt for input
            user_input_lines = []

            print(f"\n{Fore.BLUE}You: {Style.RESET_ALL}", end="")
            while True:
                line = input()
                if line.strip().lower() == ',,,':
                    break
                user_input_lines.append(line)

            user_input = "\n".join(user_input_lines)

            if user_input.lower() in ["exit", "quit"]:
                print(Fore.RED + "Exiting session.")
                break

            # Append user message to conversation state
            messages.append({
                "role": "user",
                "content": user_input
            })

            # Get model response
            chat_completion = client.chat.completions.create(
                model=deployment_id,
                messages=messages,
                temperature=args.temperature,
                max_tokens=args.max_tokens,
                stream=True,
            )

            # Print model's response and update messages
            response_content = ""
            print(f"\n{Fore.MAGENTA}AI: {Style.RESET_ALL}", end="")
            for chunk in chat_completion:
                delta = chunk.choices[0].delta.content or ""
                response_content += delta
                print(delta, end="")
            print("\n", end="")

            messages.append({
                "role": "assistant",
                "content": response_content
            })

    except KeyboardInterrupt:
        print("\nSession interrupted by user.")


if __name__ == "__main__":
    main()
