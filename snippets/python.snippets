###########################################################################
#                            TEXTMATE SNIPPETS                            #
###########################################################################

##########
# COMMON #
##########

# The smart def and smart class snippets use a global option called
# "g:ultisnips_python_style" which, if set to "doxygen" will use doxygen
# style comments in docstrings.

global !p

NORMAL  = 0x1
DOXYGEN = 0x2
SPHINX  = 0x3

def get_args(arglist):
    args = [arg.split('=')[0].strip() for arg in arglist.split(',') if arg]
    args = [arg for arg in args if arg and arg != "self"]

    return args


def get_style(snip):
    style = snip.opt("g:ultisnips_python_style", "normal")

    if    style == "doxygen": return DOXYGEN
    elif  style == "sphinx": return SPHINX
    else: return NORMAL


def format_arg(arg, style):
    if style == DOXYGEN:
        return "@param %s @todo" % arg
    elif style == SPHINX:
        return ":param %s: @todo" % arg
    elif style == NORMAL:
        return ":%s: @todo" % arg


def format_return(style):
    if style == DOXYGEN:
        return "@return: @todo"
    elif style in (NORMAL, SPHINX):
        return ":returns: @todo"


def write_docstring_args(args, snip):
    if not args:
        snip.rv += ' """'
        return

    snip.rv += '\n' + snip.mkline('', indent='')

    style = get_style(snip)

    for arg in args:
        snip += format_arg(arg, style)


def write_init_body(args, parents, snip):
    parents = [p.strip() for p in parents.split(",")]
    parents = [p for p in parents if p != 'object']

    for p in parents:
        snip += p + ".__init__(self)"

    if parents:
        snip.rv += '\n' + snip.mkline('', indent='')

    for arg in args:
        snip += "self._%s = %s" % (arg, arg)


def write_slots_args(args, snip):
    args = ['"%s"' % arg for arg in args]
    snip += '__slots__ = (%s,)' % ', '.join(args)

endglobal

snippet main "ifmain" b
if __name__ == '__main__':
	${1:main()}$0
endsnippet

snippet def "function with docstrings" b
def ${1:function}(`!p
if snip.indent:
   snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
	"""${4:@todo: Docstring for $1}`!p
snip.rv = ""
snip >> 1

args = get_args(t[2])
if args:
   write_docstring_args(args, snip)

style = get_style(snip)
snip += format_return(style)
snip.rv += '\n' + snip.mkline('', indent='')
snip += '"""' `
	${0:pass}
endsnippet

##########################
# Try / Except / Finally #
##########################
snippet try "Try / Except" b
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
endsnippet

snippet try "Try / Except / Else" b
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
else:
	${5:pass}
endsnippet

snippet try "Try / Except / Finally" b
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
finally:
	${5:pass}
endsnippet

snippet try "Try / Except / Else / Finally" b
try:
	${1:pass}
except${2: ${3:Exception}, ${4:e}}:
	${5:raise}
else:
	${6:pass}
finally:
	${7:pass}
endsnippet

#################
#  My snippets  #
#################

snippet bp2 "Expand the shebang and add boilerplate." b
#!/usr/bin/env python2
# encoding: utf-8

###############################################################################
# Purpose: ${1:...}
# Author: ${2:...}
# Dependencies: ${3:...}
# Created: `date +%c`
###############################################################################
${0}
endsnippet

snippet bp3 "Shebang header for python scripts" b
#!/usr/bin/env python3

###############################################################################
# Purpose: ${1:...}
# Author: ${2:...}
# Dependencies: ${3:...}
# Created: `date +%c`
###############################################################################
${0}
endsnippet

snippet mod "Add modification time to the boilerplate." b
# Modified: `date +%c`${0}
endsnippet

snippet imp "Import module." b
import ${1:module}${0}
endsnippet

snippet imp "Import module as `shortname'." b
import ${1:module} as ${2:shortname}${0}
endsnippet

snippet imp "From module import *." b
from ${1:module} import *${0}
endsnippet

snippet imp "From module import `stuff'." b
from ${1:module} import ${2:stuff}${0}
endsnippet

snippet imp "From module import `stuff' as `shortname'." b
from ${1:module} import ${2:stuff} as ${3:shortname}${0}
endsnippet

# vim:ft=snippets:
