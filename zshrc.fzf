#########
#  FZF  #
#########

# Setup fzf

if [[ ! "$PATH" =~ "$HOME/configs/fzf/bin" ]]; then
  export PATH="$PATH:$HOME/configs/fzf/bin"
fi

# Man path
if [[ ! "$MANPATH" =~ "$HOME/configs/fzf/man" && \
    -d "$HOME/configs/fzf/man" ]]; then
  export MANPATH="$MANPATH:$HOME/configs/fzf/man"
fi

# Auto-completion
[[ $- =~ i ]] && source "$HOME/configs/fzf/shell/completion.zsh" 2> /dev/null

export FZF_DEFAULT_OPTS="--tmux top,20% --style full --smart-case --color=light --layout=reverse --exact --extended --cycle --no-mouse"

if [[ $(get_first_available rg grep) == "rg" ]]; then
  export FZF_DEFAULT_COMMAND="rg --files --no-ignore --hidden --follow -g '!.git/*' -g '!.virtualenv/*' -g '!__pycache__' -g '!node_modules'"
elif [[ $(get_first_available rg grep) == "grep" ]]; then
  export FZF_DEFAULT_COMMAND='find . -type f | grep -v -e "/\.git/" -e "/\.virtualenv/" -e "__pycache__" -e "node_modules"'
fi

export FZF_CTRL_T_COMMAND=$FZF_DEFAULT_COMMAND

export FZF_ALT_C_OPTS=$FZF_DEFAULT_OPTS
export FZF_ALT_C_COMMAND='find . -type d -not -empty | grep -v -e "/\.git/" -e "/\.virtualenv/" -e "__pycache__" -e "node_modules"'

export FZF_COMPLETION_TRIGGER=';;'

function fzp {
  local mode prefix search_cmd search_args install_cmd install_args
  mode="$1"
  prefix=""
  install_cmd=$(get_first_available paru pacman apt-get)
  if [[ "$install_cmd" == "paru" ]]; then
    search_cmd="$install_cmd"
    if [[ "$mode" == "install" ]]; then
      search_args="-Slq"
      install_args="-S --needed"
    elif [[ "$mode" == "uninstall" ]]; then
      search_args="-Qq"
      install_args="-Rns"
    fi
  elif [[ "$install_cmd" == "pacman" ]]; then
    search_cmd="$install_cmd"
    if [[ "$mode" == "install" ]]; then
      search_args="-Slq"
      install_args="-S --needed"
    elif [[ "$mode" == "uninstall" ]]; then
      search_args="-Qq"
      install_args="-Rns"
    fi
  elif [[ "$install_cmd" == "apt-get" ]]; then
    if [[ "$mode" == "install" ]]; then
      search_cmd="apt-cache"
      search_args="pkgnames"
      install_args="install"
    elif [[ "$mode" == "uninstall" ]]; then
      search_cmd="dpkg-query"
      search_args="-W | cut -f 1"
      install_args="remove"
    fi
  fi
  pkgs=$(eval "$search_cmd $search_args" | fzf --query="$2" | tr '\n' ' ')
  if [[ -n "$pkgs" ]]; then
    exists_command sudo && prefix="sudo"
    if [[ "$install_cmd" == "paru" ]]; then
        prefix=""
    fi
    echo "$prefix $install_cmd $install_args $pkgs"
    eval "$prefix $install_cmd $install_args $pkgs"
  fi
}

function zin { fzp "install" "$@" }
function zun { fzp "uninstall" "$@" }

function zpacowner {
  ! exists_command pacman && echo "No pacman. Goodbye!" && return 1
  local file
  file=$(plocate -r '.*' | fzf --query="$1" --select-1 --exit-0)
  [[ -n "$file" ]] && pacman -Qo "$file"
}

function zpacls {
  ! exists_command pacman && echo "No pacman. Goodbye!" && return 1
  local pkg
  pkg=$(pacman -Qq | fzf --query="$1" --select-1 --exit-0)
  [[ -n "$pkg" ]] && pacman -Ql "$pkg"
}

function zpacinfo {
  ! exists_command pacman && echo "No pacman. Goodbye!" && return 1
  local pkg
  pkg=$(pacman -Qq | fzf --query="$1" --select-1 --exit-0)
  [[ -n "$pkg" ]] && pacman -Qi "$pkg"
}

alias zpacreqby='zpacinfo | grep "^Required By"'
alias zpacdepon='zpacinfo | grep "^Depends On"'
alias zpacver='zpacinfo | grep "^Version"'
alias zpacreason='zpacinfo | grep -e "^Install Reason" -e "^Required By"'

function zloc {
  local file handler
  file=$(plocate -r '.*' | fzf --query="$1" --select-1 --exit-0)
  handler=$(get_first_available xdg-open start)
  [[ -n "$file" ]] && echo "$handler" "$file"
  [[ -n "$file" ]] && "$handler" "$file"
}

function zapply-colorscheme {
    local scheme
    scheme=$(list-colorschemes | sort -u | fzf --query="$1" --select-1 --exit-0)
    [[ -n "$scheme" ]] && apply-colorscheme "$(echo "$scheme" | tr -d "'")"
}

#############
#  FZF-TAB  #
#############

# From: https://github.com/Aloxaf/fzf-tab?tab=readme-ov-file

# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false

# set descriptions format to enable group support
# NOTE: don't use escape sequences (like '%F{red}%d%f') here, fzf-tab will ignore them
zstyle ':completion:*:descriptions' format '[%d]'

# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# force zsh not to show completion menu, which allows fzf-tab to capture the unambiguous prefix
zstyle ':completion:*' menu no

# preview directory's content with eza when completing cd
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'lsd --tree --depth 1 $realpath'

# custom fzf flags
# NOTE: fzf-tab does not follow FZF_DEFAULT_OPTS by default
zstyle ':fzf-tab:*' fzf-flags --color=fg:1,fg+:2 --bind=tab:accept

# To make fzf-tab follow FZF_DEFAULT_OPTS.
# NOTE: This may lead to unexpected behavior since some flags break this plugin. See Aloxaf/fzf-tab#455.
zstyle ':fzf-tab:*' use-fzf-default-opts yes

# switch group using `<` and `>`
zstyle ':fzf-tab:*' switch-group '<' '>'

####################
# Load the plugins #
####################

# This should be last
source <(fzf --zsh)
source ~/configs/fzf-tab/fzf-tab.plugin.zsh
